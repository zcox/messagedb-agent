[project]
name = "messagedb-agent"
version = "0.1.0"
description = "Event-sourced agent system using Message DB for durable, observable, and distributed execution"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "ZCox", email = "your.email@example.com" }
]
keywords = ["agent", "event-sourcing", "messagedb", "llm", "ai"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "google-cloud-aiplatform>=1.121.0",
    "opentelemetry-api>=1.38.0",
    "opentelemetry-sdk>=1.38.0",
    "psycopg>=3.2.11",
    "psycopg-pool>=3.2.6",
    "python-dotenv>=1.1.1",
    "structlog>=25.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[project.scripts]
messagedb-agent = "messagedb_agent.__main__:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/messagedb_agent"]

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]

[tool.basedpyright]
pythonVersion = "3.11"
typeCheckingMode = "strict"
reportUnusedImport = "error"
reportUnusedVariable = "error"
reportUnnecessaryTypeIgnoreComment = "warning"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=messagedb_agent --cov-report=term-missing"
markers = [
    "integration: marks tests as integration tests that require external services (deselect with '-m \"not integration\"')",
]

[dependency-groups]
dev = [
    "basedpyright>=1.31.7",
    "black>=25.9.0",
    "pytest>=8.4.2",
    "pytest-cov>=7.0.0",
    "pytest-docker>=3.2.3",
    "ruff>=0.14.1",
]
