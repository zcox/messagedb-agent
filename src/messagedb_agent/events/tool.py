"""Tool event types for the event-sourced agent system.

This module defines events that represent tool execution actions, such as
tool invocations, successful completions, and failures.

Tool events are generated by the processing engine when the LLM requests
tool executions and when those tools complete or fail.
"""

from dataclasses import dataclass
from typing import Any

from messagedb_agent.events.base import EventData


@dataclass(frozen=True)
class ToolExecutionRequestedData(EventData):
    """Data payload for ToolExecutionRequested event.

    This event is recorded when the LLM requests execution of a specific tool.
    It captures the tool name and arguments that will be passed to the tool.

    Attributes:
        tool_name: Name of the tool to execute
        arguments: Dictionary of arguments to pass to the tool function

    Example:
        >>> data = ToolExecutionRequestedData(
        ...     tool_name="get_current_time",
        ...     arguments={"timezone": "UTC"}
        ... )
    """

    tool_name: str
    arguments: dict[str, Any]

    def __post_init__(self) -> None:
        """Validate tool execution requested data after initialization.

        Raises:
            ValueError: If tool_name is empty
        """
        if not self.tool_name or not self.tool_name.strip():
            raise ValueError("Tool name cannot be empty")


@dataclass(frozen=True)
class ToolExecutionCompletedData(EventData):
    """Data payload for ToolExecutionCompleted event.

    This event is recorded when a tool successfully completes execution.
    It captures the tool name, result, and execution time for observability.

    Attributes:
        tool_name: Name of the tool that was executed
        result: The result returned by the tool (can be any JSON-serializable type)
        execution_time_ms: Time taken to execute the tool in milliseconds

    Example:
        >>> data = ToolExecutionCompletedData(
        ...     tool_name="get_current_time",
        ...     result="2024-01-01T12:00:00Z",
        ...     execution_time_ms=15
        ... )
    """

    tool_name: str
    result: Any
    execution_time_ms: int

    def __post_init__(self) -> None:
        """Validate tool execution completed data after initialization.

        Raises:
            ValueError: If tool_name is empty or execution_time_ms is negative
        """
        if not self.tool_name or not self.tool_name.strip():
            raise ValueError("Tool name cannot be empty")
        if self.execution_time_ms < 0:
            raise ValueError(f"Execution time must be >= 0, got {self.execution_time_ms}")


@dataclass(frozen=True)
class ToolExecutionFailedData(EventData):
    """Data payload for ToolExecutionFailed event.

    This event is recorded when a tool execution fails due to errors such as
    invalid arguments, runtime exceptions, timeouts, or other issues.

    Attributes:
        tool_name: Name of the tool that failed
        error_message: Description of the error that occurred
        retry_count: Number of retry attempts made (0 for first failure)

    Example:
        >>> data = ToolExecutionFailedData(
        ...     tool_name="get_current_time",
        ...     error_message="Invalid timezone: XYZ",
        ...     retry_count=0
        ... )
    """

    tool_name: str
    error_message: str
    retry_count: int

    def __post_init__(self) -> None:
        """Validate tool execution failed data after initialization.

        Raises:
            ValueError: If tool_name or error_message is empty, or retry_count is negative
        """
        if not self.tool_name or not self.tool_name.strip():
            raise ValueError("Tool name cannot be empty")
        if not self.error_message or not self.error_message.strip():
            raise ValueError("Error message cannot be empty")
        if self.retry_count < 0:
            raise ValueError(f"Retry count must be >= 0, got {self.retry_count}")


@dataclass(frozen=True)
class ToolExecutionApprovedData(EventData):
    """Data payload for ToolExecutionApproved event.

    This event is recorded when a user approves execution of a tool that
    requires permission. It captures the approval decision and allows the
    processing loop to proceed with tool execution.

    Attributes:
        tool_name: Name of the tool that was approved
        approved_by: Identifier for who approved the execution (e.g., "user", "auto")

    Example:
        >>> data = ToolExecutionApprovedData(
        ...     tool_name="write_file",
        ...     approved_by="user"
        ... )
    """

    tool_name: str
    approved_by: str

    def __post_init__(self) -> None:
        """Validate tool execution approved data after initialization.

        Raises:
            ValueError: If tool_name or approved_by is empty
        """
        if not self.tool_name or not self.tool_name.strip():
            raise ValueError("Tool name cannot be empty")
        if not self.approved_by or not self.approved_by.strip():
            raise ValueError("Approved by cannot be empty")


@dataclass(frozen=True)
class ToolExecutionRejectedData(EventData):
    """Data payload for ToolExecutionRejected event.

    This event is recorded when a user rejects execution of a tool that
    requires permission. The tool will not be executed and a failure event
    will be written instead.

    Attributes:
        tool_name: Name of the tool that was rejected
        rejected_by: Identifier for who rejected the execution (e.g., "user", "timeout")
        reason: Optional reason for rejection

    Example:
        >>> data = ToolExecutionRejectedData(
        ...     tool_name="write_file",
        ...     rejected_by="user",
        ...     reason="Unsafe operation"
        ... )
    """

    tool_name: str
    rejected_by: str
    reason: str = "User rejected execution"

    def __post_init__(self) -> None:
        """Validate tool execution rejected data after initialization.

        Raises:
            ValueError: If tool_name or rejected_by is empty
        """
        if not self.tool_name or not self.tool_name.strip():
            raise ValueError("Tool name cannot be empty")
        if not self.rejected_by or not self.rejected_by.strip():
            raise ValueError("Rejected by cannot be empty")


# Event type constants for consistency
TOOL_EXECUTION_REQUESTED = "ToolExecutionRequested"
TOOL_EXECUTION_APPROVED = "ToolExecutionApproved"
TOOL_EXECUTION_REJECTED = "ToolExecutionRejected"
TOOL_EXECUTION_COMPLETED = "ToolExecutionCompleted"
TOOL_EXECUTION_FAILED = "ToolExecutionFailed"
