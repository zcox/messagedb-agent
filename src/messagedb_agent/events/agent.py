"""Agent event types for the event-sourced agent system.

This module defines events that represent agent actions, such as LLM responses,
reasoning steps, and decisions.

Agent events are generated by the processing engine as it orchestrates
LLM calls and processes results.
"""

from dataclasses import dataclass
from typing import Any

from messagedb_agent.events.base import EventData


@dataclass(frozen=True)
class ToolCall:
    """Represents a single tool call requested by the LLM.

    Attributes:
        id: Unique identifier for this tool call
        name: Name of the tool to execute
        arguments: Dictionary of arguments to pass to the tool

    Example:
        >>> tool_call = ToolCall(
        ...     id="call_123",
        ...     name="get_current_time",
        ...     arguments={"timezone": "UTC"}
        ... )
    """

    id: str
    name: str
    arguments: dict[str, Any]

    def __post_init__(self) -> None:
        """Validate tool call after initialization.

        Raises:
            ValueError: If id or name is empty
        """
        if not self.id or not self.id.strip():
            raise ValueError("Tool call id cannot be empty")
        if not self.name or not self.name.strip():
            raise ValueError("Tool call name cannot be empty")


@dataclass(frozen=True)
class LLMResponseReceivedData(EventData):
    """Data payload for LLMResponseReceived event.

    This event is recorded when the LLM successfully returns a response,
    whether it contains text, tool calls, or both.

    Attributes:
        response_text: The text response from the LLM (may be empty if only tool calls)
        tool_calls: List of tool calls requested by the LLM (may be empty)
        model_name: Name/identifier of the LLM model used
        token_usage: Dictionary with token usage statistics (e.g., input_tokens, output_tokens)

    Example:
        >>> data = LLMResponseReceivedData(
        ...     response_text="I'll help you with that.",
        ...     tool_calls=[],
        ...     model_name="claude-sonnet-4-5@20250929",
        ...     token_usage={"input_tokens": 100, "output_tokens": 20}
        ... )
    """

    response_text: str
    tool_calls: list[ToolCall]
    model_name: str
    token_usage: dict[str, int]

    def __post_init__(self) -> None:
        """Validate LLM response data after initialization.

        Raises:
            ValueError: If model_name is empty or both response_text and tool_calls are empty
        """
        if not self.model_name or not self.model_name.strip():
            raise ValueError("Model name cannot be empty")

        # Either response_text or tool_calls must be present
        has_text = self.response_text and self.response_text.strip()
        has_tools = self.tool_calls and len(self.tool_calls) > 0

        if not has_text and not has_tools:
            raise ValueError("LLM response must contain either response_text or tool_calls")


@dataclass(frozen=True)
class LLMCallFailedData(EventData):
    """Data payload for LLMCallFailed event.

    This event is recorded when an LLM call fails due to errors such as
    API failures, rate limits, timeouts, or invalid requests.

    Attributes:
        error_message: Description of the error that occurred
        retry_count: Number of retry attempts made (0 for first failure)

    Example:
        >>> data = LLMCallFailedData(
        ...     error_message="API rate limit exceeded",
        ...     retry_count=0
        ... )
    """

    error_message: str
    retry_count: int

    def __post_init__(self) -> None:
        """Validate LLM call failed data after initialization.

        Raises:
            ValueError: If error_message is empty or retry_count is negative
        """
        if not self.error_message or not self.error_message.strip():
            raise ValueError("Error message cannot be empty")
        if self.retry_count < 0:
            raise ValueError(f"Retry count must be >= 0, got {self.retry_count}")


# Event type constants for consistency
LLM_RESPONSE_RECEIVED = "LLMResponseReceived"
LLM_CALL_FAILED = "LLMCallFailed"
