"""System event types for the event-sourced agent system.

This module defines events that represent system-level actions such as
session lifecycle management, errors, and control flow.

System events are generated by the processing engine to track the overall
state and lifecycle of agent sessions.
"""

from dataclasses import dataclass
from typing import Any

from messagedb_agent.events.base import EventData


@dataclass(frozen=True)
class SessionStartedData(EventData):
    """Data payload for SessionStarted event.

    This event is recorded when a new agent session begins. It marks the
    start of the event stream for a thread and may include optional
    initial context or configuration.

    Attributes:
        thread_id: Unique identifier for this agent session thread
        initial_context: Optional dictionary containing initial context, configuration,
                        or metadata for the session (e.g., user info, settings)

    Example:
        >>> data = SessionStartedData(
        ...     thread_id="abc123-def456",
        ...     initial_context={"user_id": "user_789", "language": "en"}
        ... )
    """

    thread_id: str
    initial_context: dict[str, Any] | None = None

    def __post_init__(self) -> None:
        """Validate session started data after initialization.

        Raises:
            ValueError: If thread_id is empty
        """
        if not self.thread_id or not self.thread_id.strip():
            raise ValueError("Thread ID cannot be empty")


@dataclass(frozen=True)
class SessionCompletedData(EventData):
    """Data payload for SessionCompleted event.

    This event is recorded when an agent session ends, either successfully,
    due to an error, or from a timeout. It marks the end of the session
    lifecycle and indicates why the session terminated.

    Attributes:
        completion_reason: Reason for session completion (e.g., "success", "failure",
                          "timeout", "user_request", "max_iterations_reached")

    Example:
        >>> data = SessionCompletedData(completion_reason="success")
    """

    completion_reason: str

    def __post_init__(self) -> None:
        """Validate session completed data after initialization.

        Raises:
            ValueError: If completion_reason is empty
        """
        if not self.completion_reason or not self.completion_reason.strip():
            raise ValueError("Completion reason cannot be empty")


# Event type constants for consistency
SESSION_STARTED = "SessionStarted"
SESSION_COMPLETED = "SessionCompleted"
